// Generated by CoffeeScript 1.6.1

/*
Queries Section

imports from other modules.
wrap in (-> ... apply) to defer evaluation
such that the value can be defined later than this assignment (file load order).
*/


(function() {
  var EmailSelectors, EmailWidget, Queries, std_ajax_err;

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  EmailSelectors = (function() {
    EmailSelectors.prototype.DESCRIPTION_LIMIT = 50;
    EmailSelectors.prototype.TRUNCATION = 60;

    function EmailSelectors($container, $section, params) {
      var label, labelArray, templateHtml, _i, _len,
        _this = this;
      this.$container = $container;
      if (params == null) {
        params = {};
      }
      params = _.defaults(params, {
        label: this.$container.data('label')
      });
      templateHtml = $('#email-list-widget-template').html();
      this.$container.html(Mustache.render(templateHtml, params));
      labelArray = (this.$container.data('selections')).split('<>');
      this.$listSelector = this.$container.find('select.single-email-selector');
      // populate selectors
      this.$listSelector.empty();
      this.listEndpoint = this.$container.data('list-endpoint');
      this.$listSelector.append($('<option/>'));
      if ($container.attr('data-label') === 'Select Section') {
        this.load_list();
      } else if (this.$container.attr('data-label') === 'Select Problem') {
        this.load_list();
      } else {
        for (_i = 0, _len = labelArray.length; _i < _len; _i++) {
          label = labelArray[_i];
          this.$listSelector.append($('<option/>', {
            text: label
          }));
        }
      }
      this.$listSelector.change(function() {
        var $opt, chosenClass;
        $opt = _this.$listSelector.children('option:selected');
        if (!$opt.length) {
          return;
        }
        if (_this.$container.attr('data-label') === gettext('Select a Type')) {
          chosenClass = $opt.text().trim();
          if (chosenClass === 'Section') {
            $section.find('.problem_specific').removeClass('active');
            return $section.find('.section_specific').addClass('active');
          } else if (chosenClass === 'Problem') {
            $section.find('.section_specific').removeClass('active');
            return $section.find('.problem_specific').addClass('active');
          }
        }
      });
    }

    EmailSelectors.prototype.get_list = function(cb) {
      return $.ajax({
        dataType: 'json',
        url: this.listEndpoint,
        success: function(data) {
          return typeof cb === "function" ? cb(null, data['data']) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb(gettext('Error fetching problem or section data')) : void 0;
        })
      });
    };

    EmailSelectors.prototype.load_list = function() {
      var _this = this;
      return this.get_list(function(error, section_list) {
        if (error) {
          return _this.show_errors(error);
        }
        return _.each(section_list, function(section) {
          _this.add_row(section, 'section');
          return _.each(section.sub, function(subsection) {
            return _this.add_row(subsection, 'subsection');
          });
        });
      });
    };

    EmailSelectors.prototype.add_row = function(node, sectionOrSubsection) {
      var idArr, idSt, toDisplay;
      idArr = [node.block_type, node.block_id];
      idSt = idArr.join('/');
      toDisplay = node.display_name;
      if (node.parents) {
        toDisplay = [node.parents, toDisplay].join('<>');
      }
      // indenting subsections with dashes for readability
      if (sectionOrSubsection === 'subsection') {
        toDisplay = '---' + toDisplay;
      }
      if (toDisplay.length > this.DESCRIPTION_LIMIT) {
        toDisplay = '...' + toDisplay.substring(Math.max(0, toDisplay.length - this.TRUNCATION), toDisplay.length);
      }
      return this.$listSelector.append($('<option/>', {
        text: toDisplay,
        "class": sectionOrSubsection,
        id: idSt
      }));
    };

    return EmailSelectors;
  })();

  EmailWidget = (function() {
    function EmailWidget(emailLists, $section, $emailListContainers, $error_section) {
      var POLL_INTERVAL_IN_MS, emailList, _i, _len,
        _this = this;
      this.$emailListContainers = $emailListContainers;
      this.$error_section = $error_section;
      this.$queryEndpoint = $('.email-lists-management').data('query-endpoint');
      this.$totalEndpoint = $('.email-lists-management').data('total-endpoint');
      this.$deleteSavedEndpoint = $('.email-lists-management').data('delete-saved-endpoint');
      this.$deleteTempEndpoint = $('.email-lists-management').data('delete-temp-endpoint');
      this.$deleteBatchTempEndpoint = $('.email-lists-management').data('delete-batch-temp-endpoint');
      for (_i = 0, _len = emailLists.length; _i < _len; _i++) {
        emailList = emailLists[_i];
        emailList.$container.addClass('active');
      }
      this.$getEstBtn = $section.find("input[name='getest']");
      this.$getEstBtn.click(function() {
        return _this.reload_estimated();
      });
      this.$startoverBtn = $section.find("input[name='startover']");
      this.$startoverBtn.click(function() {
        _this.delete_temporary();
        $('.emailWidget.queryTableBody tr').remove();
        return _this.reload_estimated();
      });
      this.$saveQueryBtn = $section.find("input[name='savequery']");
      this.$saveQueryBtn.click(function() {
        return _this.send_save_query();
      });
      this.$emailCsvBtn = $section.find("input[name='getcsv']");
      this.$emailCsvBtn.click(function(event) {
        var rows, sendData, sendingQuery, url;
        rows = $('.emailWidget.queryTableBody tr');
        sendingQuery = _.map(rows, function(row) {
          return row.getAttribute('query');
        });
        sendData = sendingQuery.join(',');
        url = _this.$emailCsvBtn.data('endpoint');
        // handle csv special case
        // redirect the document to the csv file.
        url += '/csv';
        url += '?existing=' + window.encodeURIComponent(sendData);
        return window.location.href = url;
      });
      this.load_saved_queries();
      this.load_saved_temp_queries();
      POLL_INTERVAL_IN_MS = 15000;  // # 15 * 1000, 15 seconds in ms
      this.poller = new window.InstructorDashboard.util.IntervalManager(POLL_INTERVAL_IN_MS, function() {
        return _this.load_saved_temp_queries();
      });
      $('.emailWidget.addQuery').click(function(event) {
        var $selected, option, selectedOptions, selectedOptionsText, _j, _len1;
        $selected = _this.$emailListContainers.find('select.single-email-selector option:selected');
        // check to see if stuff has been filled out
        if ($selected[1].text === 'Section') {
          selectedOptions = [
            {
              'text': $selected[0].text,
              'id': $selected[0].id
            }, {
              'text': $selected[1].text,
              'id': $selected[1].id
            }, {
              'text': $selected[4].text,
              'id': $selected[4].id
            }, {
              'text': $selected[5].text,
              'id': $selected[5].id
            }
          ];
          selectedOptionsText = [$selected[0].text, $selected[1].text, $selected[4].text, $selected[5].text];
        } else {
          selectedOptions = [
            {
              'text': $selected[0].text,
              'id': $selected[0].id
            }, {
              'text': $selected[1].text,
              'id': $selected[1].id
            }, {
              'text': $selected[2].text,
              'id': $selected[2].id
            }, {
              'text': $selected[3].text,
              'id': $selected[3].id
            }
          ];
          selectedOptionsText = [$selected[0].text, $selected[1].text, $selected[2].text, $selected[3].text];
        }
        for (_j = 0, _len1 = selectedOptions.length; _j < _len1; _j++) {
          option = selectedOptions[_j];
          if (option['text'] === '') {
            $('.emailWidget.incompleteMessage').html(gettext('Query is incomplete. Please make all the selections.'));
            return;
          }
        }
        $('.emailWidget.incompleteMessage').html('');
        _this.chosen = $selected[0].text;
        _this.tr = _this.start_row(_this.chosen.toLowerCase(), selectedOptions, '', $('.emailWidget.queryTableBody'));
        _this.useQueryEndpoint = [_this.$queryEndpoint, selectedOptionsText.slice(0, 2).join('/'), selectedOptions[2].id].join('/');
        _this.filtering = selectedOptions[3].text;
        _this.entityName = selectedOptions[2].text;
        _this.reload_students(_this.tr);
        _this.$emailListContainers.find('select.single-email-selector').prop('selectedIndex', 0);
        $('.problem_specific').removeClass('active');
        return $('.section_specific').removeClass('active');
      });
    }

    EmailWidget.prototype.get_saved_temp_queries = function(cb) {
      return $.ajax({
        dataType: 'json',
        url: $('.email-lists-management').data('temp-queries-endpoint'),
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb(gettext('Error getting saved temp queries')) : void 0;
        })
      });
    };

    // get a user's in-progress queries and load them into active queries
    EmailWidget.prototype.load_saved_temp_queries = function() {
      var _this = this;
      return this.get_saved_temp_queries(function(error, data) {
        var queries;
        if (error) {
          return _this.show_errors(error);
        }
        $('.emailWidget.queryTableBody tr').remove();
        queries = data['queries'];
        // use _.each instead of 'for' so that member
        // is bound in the button callback.
        return _.each(queries, function(query) {
          var arr, blockId, blockType, displayEntity, displayName, done, filterOn, inclusion, queryId, stateKey, type;
          queryId = query['id'];
          blockId = query['block_id'];
          blockType = query['block_type'];
          stateKey = blockType + '/' + blockId;
          displayName = query['display_name'];
          displayEntity = {
            'text': displayName,
            'id': stateKey
          };
          filterOn = {
            'text': query['filter_on']
          };
          inclusion = {
            'text': query['inclusion']
          };
          done = query['done'];
          type = {
            'text': query['type']
          };
          arr = [inclusion, type, displayEntity, filterOn, done];
          _this.tr = _this.start_row(inclusion['text'].toLowerCase(), arr, {
            'class': ['working'],
            'query': queryId
          }, $('.emailWidget.queryTableBody'));
          return _this.check_done();
        });
      });
    };

    EmailWidget.prototype.get_saved_queries = function(cb) {
      return $.ajax({
        dataType: 'json',
        url: $('.emailWidget.savedQueriesTable').data('endpoint'),
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb(gettext('Error getting saved queries')) : void 0;
        })
      });
    };

    // get a user's saved queries and load them into saved queries
    EmailWidget.prototype.load_saved_queries = function() {
      var _this = this;
      $('.emailWidget.savedQueriesTable tr').remove();
      $('.emailWidget.invisibleQueriesStorage tr').remove();
      return this.get_saved_queries(function(error, data) {
        var cells, group, groupNames, groups, i, invisibleTable, iter, lookup, names, queries, query, savedGroup, savedQs, savedQueryDisplayName, savedVals, time, types, val, _i, _j, _k, _len, _len1, _ref, _results;
        // abort on error
        if (error) {
          return _this.show_errors(error);
        }
        queries = data['queries'];
        groups = new Set();
        groupNames = {};
        invisibleTable = $('.emailWidget.invisibleQueriesStorage');
        _.each(queries, function(query) {
          var blockId, blockType, created, displayEntity, displayName, filterOn, inclusion, queryVals, stateKey, type;
          blockId = query['block_id'];
          blockType = query['block_type'];
          stateKey = blockType + '/' + blockId;
          displayName = query['display_name'];
          displayEntity = {
            'text': displayName,
            'id': stateKey
          };
          filterOn = {
            'text': query['filter_on']
          };
          inclusion = {
            'text': query['inclusion']
          };
          created = query['created'];
          type = {
            'text': query['type']
          };
          queryVals = [inclusion, type, displayEntity, filterOn];
          _this.tr = _this.start_row(inclusion['text'], queryVals, {
            'class': ['saved' + query.group]
          }, invisibleTable);
          _this.tr[0].setAttribute('created', created);
          groups.add(query['group']);
          if (query['group_title'].length !== 0) {
            return groupNames[query['group']] = query['group_title'];
          }
        });
        savedGroup = [];
        iter = groups.values();
        val = iter.next();
        while (val['done'] === false) {
          savedGroup.push(val['value']);
          val = iter.next();
        }
        savedGroup.sort(function(a, b) {
          return b - a;
        });
        _results = [];
        for (_i = 0, _len = savedGroup.length; _i < _len; _i++) {
          group = savedGroup[_i];
          lookup = '.saved' + group;
          savedQs = $(lookup);
          types = [];
          names = [];
          time = '';
          for (_j = 0, _len1 = savedQs.length; _j < _len1; _j++) {
            query = savedQs[_j];
            cells = query.children;
            types.push(jQuery(cells[0]).text());
            names.push(jQuery(cells[2]).text());
            time = query.getAttribute('created');
          }
          if (typeof groupNames[group] === 'undefined') {
            savedQueryDisplayName = '';
            for (i = _k = 0, _ref = types.length - 1; 0 <= _ref ? _k <= _ref : _k >= _ref; i = 0 <= _ref ? ++_k : --_k) {
              savedQueryDisplayName += types[i];
              savedQueryDisplayName += ' ';
              savedQueryDisplayName += names[i] + ' ';
            }
          } else {
            savedQueryDisplayName = groupNames[group];
          }
          savedVals = [
            {
              'text': time
            }, {
              'text': savedQueryDisplayName
            }
          ];
          _results.push(_this.start_saved_row('and', savedVals, group, $('.emailWidget.savedQueriesTable')));
        }
        return _results;
      });
    };

    // if each individual query is processed,
    // allow the user to download the csv and save the query
    EmailWidget.prototype.check_done = function() {
      // check if all other queries have returned,
      // if so can get total csv
      var allGood, rowArr, rows, tab;
      rowArr = [];
      tab = $('.emailWidget.queryTableBody');
      rows = tab.find('tr');
      _.each(rows, function(row) {
        return rowArr.push(row.getAttribute('query'));
      });
      allGood = true;
      _.each(rowArr, function(status) {
        if (status === 'working') {
          return allGood = false;
        }
      });
      if (allGood) {
        this.$saveQueryBtn.removeClass('disabled');
        this.$emailCsvBtn.removeClass('disabled');
        return this.$emailCsvBtn[0].value = 'Download CSV';
      }
    };

    // deletes an active query from the table and the db
    EmailWidget.prototype.delete_temporary = function() {
      var queriesToDelete;
      queriesToDelete = [];
      _.each($('.emailWidget.queryTableBody tr'), function(row) {
        var queryToDelete;
        if (row.hasAttribute('query')) {
          queryToDelete = row.getAttribute('query');
          return queriesToDelete.push(queryToDelete);
        }
      });
      this.delete_temp_query_batch(queriesToDelete);
      return $('.emailWidget.queryTableBody tr').remove();
    };

    EmailWidget.prototype.rename_button_click = function(event) {
      var $cancelEditButton, $renameBtn, $saveCancelEditButton, $saveEditButton, htmlString, originalText, targ,
        _this = this;
      $saveCancelEditButton = $(_.template('<div class="emailWidget saveEditName"><i class="icon fa fa-floppy-o"></i>\
          <%= labelSave %></div> <div class="emailWidget cancelEditName"><i class="icon fa fa-times-circle">\
          </i> <%= labelCancel %></div>', {
        labelSave: 'Save',
        labelCancel: 'Cancel'
      }));
      $renameBtn = $(_.template('<div class="emailWidget editName"><i class="icon fa fa-pencil">\
      </i> <%= label %></div>', {
        label: 'Rename'
      }));
      targ = event.target;
      while (!targ.classList.contains('editName')) {
        targ = targ.parentNode;
      }
      targ = jQuery(targ).parent();
      originalText = targ.text().trim().substring(6);
      targ.html('');
      targ.append($saveCancelEditButton);
      htmlString = '<div class="emailWidget invisibleSavedGroupName">' + originalText + '</div><input type="text" class="emailWidget editNameInput" name="queryName" value="' + originalText + '">';
      targ.append(htmlString);
      $cancelEditButton = targ.find(".emailWidget.cancelEditName");
      $saveEditButton = targ.find(".emailWidget.saveEditName");
      $cancelEditButton.click(function(event) {
        var parent;
        targ = event.target;
        while (!targ.classList.contains('cancelEditName')) {
          targ = targ.parentNode;
        }
        targ = jQuery(targ);
        parent = targ.parent();
        originalText = parent.find(".emailWidget.invisibleSavedGroupName").text();
        parent.html('');
        parent.append($renameBtn);
        parent.append(originalText);
        return $renameBtn.click(function(event) {
          return _this.rename_button_click(event);
        });
      });
      return $saveEditButton.click(function(event) {
        var groupId, inputField, newGroupName, newText, parent, send_data;
        targ = event.target;
        while (!targ.classList.contains('saveEditName')) {
          targ = targ.parentNode;
        }
        targ = jQuery(targ);
        parent = targ.parent();
        inputField = parent.find(".emailWidget.editNameInput");
        newGroupName = inputField.attr("value");
        groupId = parent.parent().attr("groupquery");
        send_data = {
          group_id: groupId,
          group_name: newGroupName
        };
        $.ajax({
          type: 'POST',
          dataType: 'json',
          url: $('.emailWidget.savedQueriesTable').data('group-name-endpoint'),
          data: send_data,
          success: $('#send_email select option[value="' + groupId + '"]').text(newGroupName),
          error: std_ajax_err(function() {
            return typeof cb === "function" ? cb(gettext('Error saving group name')) : void 0;
          })
        });
        newText = newGroupName;
        parent.html('');
        parent.append($renameBtn);
        parent.append(newText);
        return $renameBtn.click(function(event) {
          return _this.rename_button_click(event);
        });
      });
    };

    // adds a row to saved queries
    EmailWidget.prototype.start_saved_row = function(color, arr, id, table) {
      var $deleteBtn, $loadBtn, $renameBtn, $td, cell, item, num, row, rows, _i,
        _this = this;
      rows = table[0].children;
      row = table[0].insertRow(rows);
      row.setAttribute('groupQuery', id);
      $renameBtn = $(_.template('<div class="emailWidget editName"><i class="icon fa fa-pencil">\
      </i> <%= label %></div>', {
        label: 'Rename'
      }));
      for (num = _i = 0; _i <= 1; num = ++_i) {
        cell = row.insertCell(num);
        item = arr[num];
        if (num === 1) {
          $(cell).append($renameBtn);
        }
        $(cell).append(item['text']);
        if (item.hasOwnProperty('id')) {
          cell.id = item['id'];
        }
      }
      $renameBtn.click(function(event) {
        return _this.rename_button_click(event);
      });
      $loadBtn = $(_.template('<div class="loadQuery"><i class="icon fa fa-upload">\
      </i> <%= label %></div>', {
        label: 'Load'
      }));
      $loadBtn.click(function(event) {
        var cells, curRow, groupedQueryId, rowsToAdd, savedQueryOptions, savedQueryOptionsText, targ, _j, _len, _results;
        _this.delete_temporary();
        $('.emailWidget.queryTableBody tr').remove();
        targ = event.target;
        while (!targ.classList.contains('loadQuery')) {
          targ = targ.parentNode;
        }
        curRow = targ.parentNode.parentNode;
        groupedQueryId = curRow.getAttribute('groupQuery');
        _this.$emailCsvBtn[0].value = gettext('Aggregating Queries');
        $('.emailWidget.incompleteMessage').html('');
        rowsToAdd = $('.saved' + groupedQueryId);
        _results = [];
        for (_j = 0, _len = rowsToAdd.length; _j < _len; _j++) {
          row = rowsToAdd[_j];
          cells = row.children;
          savedQueryOptions = [
            {
              'text': jQuery(cells[0]).text()
            }, {
              'text': jQuery(cells[1]).text()
            }, {
              'text': jQuery(cells[2]).text(),
              'id': cells[2].id
            }, {
              'text': jQuery(cells[3]).text()
            }
          ];
          savedQueryOptionsText = [jQuery(cells[0]).text(), jQuery(cells[1]).text(), jQuery(cells[2]).text(), jQuery(cells[3]).text()];
          _this.tr = _this.start_row(jQuery(cells[0]).text().toLowerCase(), savedQueryOptions, '', $('.emailWidget.queryTableBody'));
          // todo:this feels too hacky. suggestions?
          _this.useQueryEndpoint = [_this.$queryEndpoint, savedQueryOptionsText.slice(0, 2).join('/'), savedQueryOptions[2].id].join('/');
          _this.filtering = savedQueryOptions[3].text;
          _this.entityName = savedQueryOptions[2].text;
          _this.reload_students(_this.tr);
          _this.$emailListContainers.find('select.single-email-selector').prop('selectedIndex', 0);
          $('.problem_specific').removeClass('active');
          _results.push($('.section_specific').removeClass('active'));
        }
        return _results;
      });
      $td = $('<td>');
      $td.append($loadBtn);
      row.appendChild($td[0]);
      $deleteBtn = $(_.template('<div class="deleteSaved">\
      <i class="icon fa fa-times-circle"></i> <%= label %></div>', {
        label: 'Delete'
      }));
      $deleteBtn.click(function(event) {
        var curRow, queryToDelete, targ;
        targ = event.target;
        while (!targ.classList.contains('deleteSaved')) {
          targ = targ.parentNode;
        }
        curRow = targ.parentNode.parentNode;
        curRow.remove();
        queryToDelete = curRow.getAttribute('groupquery');
        _this.delete_saved_query(queryToDelete);
        return $('#send_email option[value="' + queryToDelete + '"]').remove();
      });
      $td = $('<td>');
      $td.append($deleteBtn);
      row.appendChild($td[0]);
      return $(row);
    };

    EmailWidget.prototype.get_students = function(cb) {
      var rows, send_data, tab;
      tab = $('.emailWidget.queryTableBody');
      rows = tab.find('tr');
      _.each(rows, function(row) {
        var problems, type;
        type = row.classList[0];
        problems = [];
        _.each(row.children, function(child) {
          var html, id;
          id = child.id;
          html = child.innerHTML;
          return problems.push({
            'id': id,
            'text': html
          });
        });
        return problems = problems.slice(0, -1);
      });
      send_data = {
        filter: this.filtering,
        entityName: this.entityName
      };
      return $.ajax({
        dataType: 'json',
        url: this.useQueryEndpoint,
        data: send_data,
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb(gettext('Error getting students')) : void 0;
        })
      });
    };

    // make a single query to the backend.
    // doesn't wait for query completion as that can take awhile
    EmailWidget.prototype.reload_students = function(tr) {
      var _this = this;
      this.$saveQueryBtn.addClass('disabled');
      this.$emailCsvBtn.addClass('disabled');
      this.$emailCsvBtn[0].value = gettext('Aggregating Queries');
      tr.addClass('working');
      return this.get_students(function(error, students) {
        var $broken_icon;
        if (error) {
          $broken_icon = $(_.template('<div class="done">\
          <i class="icon fa fa-exclamation-triangle"></i> <%= label %></div>', {
            label: gettext("Sorry, we're having a problem with this query.            Please delete this row and try again.")
          }));
          tr.children()[4].innerHTML = $broken_icon[0].outerHTML;
          return _this.show_errors(error);
        }
      });
    };

    // we don't care if these calls succeed or not so no wrapped callback
    EmailWidget.prototype.delete_temp_query = function(queryId) {
      return $.ajax({
        type: 'POST',
        dataType: 'json',
        url: this.$deleteTempEndpoint,
        data: {
          "query_id": queryId
        }
      });
    };

    EmailWidget.prototype.delete_temp_query_batch = function(queryIds) {
      var sendData;
      sendData = {
        existing: queryIds.join(',')
      };
      return $.ajax({
        type: 'POST',
        dataType: 'json',
        url: this.$deleteBatchTempEndpoint,
        data: sendData
      });
    };

    EmailWidget.prototype.delete_saved_query = function(queryId) {
      return $.ajax({
        type: 'POST',
        dataType: 'json',
        url: this.$deleteSavedEndpoint,
        data: {
          "query_id": queryId
        }
      });
    };

    // adds a row to active queries
    EmailWidget.prototype.start_row = function(color, arr, rowIdClass, table) {
      var $broken_icon, $done_icon, $progress_icon, $removeBtn, $td, andIdx, cell, curRow, idx, item, notIdx, num, orIdx, progressCell, row, rows, useIdx, _i, _j, _len,
        _this = this;
      idx = 0;
      orIdx = 0;
      andIdx = 0;
      notIdx = 0;
      useIdx = 0;
      rows = table[0].children;
      // figuring out where to place the new row
      // we want the group order to be and, or, not
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        curRow = rows[_i];
        idx += 1;
        if (curRow.classList.contains('or')) {
          orIdx = idx;
        }
        if (curRow.classList.contains('and')) {
          andIdx = idx;
        }
        if (curRow.classList.contains('not')) {
          notIdx = idx;
        }
        if (curRow.classList.contains(color)) {
          useIdx = idx;
        }
      }
      if (color === 'or' && useIdx === 0) {
        useIdx = Math.max(notIdx, andIdx);
      }
      if (color === 'not' && useIdx === 0) {
        useIdx = andIdx;
      }
      row = table[0].insertRow(useIdx);
      if (rowIdClass.hasOwnProperty('id')) {
        row.id = rowIdClass['id'];
      }
      if (rowIdClass.hasOwnProperty('query')) {
        row.setAttribute('query', rowIdClass['query']);
      }
      row.classList.add(color.toLowerCase());
      if (rowIdClass.hasOwnProperty('class')) {
        _.each(rowIdClass['class'], function(addingClass) {
          return row.classList.add(addingClass.toLowerCase());
        });
      }
      for (num = _j = 0; _j <= 3; num = ++_j) {
        cell = row.insertCell(num);
        item = arr[num];
        cell.innerHTML = item['text'];
        if (item.hasOwnProperty('id') && item['id'] !== '') {
          cell.id = item['id'];
        }
      }
      progressCell = row.insertCell(4);
      $progress_icon = $(_.template('<div class="Working">\
      <i class="fa fa-spinner fa-pulse"></i><%= label %></div>', {
        label: 'Working'
      }));
      $done_icon = $(_.template('<div class="done"><i class="icon fa fa-check">\
      </i> <%= label %></div>', {
        label: 'Done'
      }));
      $broken_icon = $(_.template('<div class="done">\
      <i class="icon fa fa-exclamation-triangle"></i> <%= label %></div>', {
        label: gettext("Sorry, we're having a problem with this query.        Please delete this row and try again.")
      }));
      if (arr.length === 4) {
        progressCell.innerHTML = $progress_icon[0].outerHTML;
      } else {
        if (arr[4] === null) {
          progressCell.innerHTML = $broken_icon[0].outerHTML;
        } else if (arr[4] === true) {
          progressCell.innerHTML = $done_icon[0].outerHTML;
          row.classList.remove('working');
        } else {
          progressCell.innerHTML = $progress_icon[0].outerHTML;
        }
      }
      $removeBtn = $(_.template('<div class="remove"><i class="icon fa fa-times-circle">\
      </i> <%= label %></div>', {
        label: 'Remove'
      }));
      $removeBtn.click(function(event) {
        var queryToDelete, targ;
        targ = event.target;
        while (!targ.classList.contains('remove')) {
          targ = targ.parentNode;
        }
        curRow = targ.parentNode.parentNode;
        curRow.remove();
        if (curRow.hasAttribute('query')) {
          queryToDelete = curRow.getAttribute('query');
          _this.delete_temp_query(queryToDelete);
        }
        return _this.check_done();
      });
      $td = $('<td>');
      $td.append($removeBtn);
      row.appendChild($td[0]);
      return $(row);
    };

    EmailWidget.prototype.save_query = function(cb) {
      var cur_queries, rows, send_data, tab;
      cur_queries = [];
      tab = $('.emailWidget.queryTableBody');
      rows = tab.find('tr');
      _.each(rows, function(row) {
        return cur_queries.push(row.getAttribute('query'));
      });
      send_data = {
        existing: cur_queries.join(','),
        savedName: $(".emailWidget.savequeryname").val()
      };
      $(".emailWidget.savequeryname").val("");
      return $.ajax({
        type: 'POST',
        dataType: 'json',
        url: this.$saveQueryBtn.data('endpoint'),
        data: send_data,
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb(gettext('Error saving query')) : void 0;
        })
      });
    };

    // save queries in active queries
    EmailWidget.prototype.send_save_query = function() {
      var _this = this;
      return this.save_query(function(error, data) {
        if (error) {
          return _this.show_errors(error);
        }
        $('#send_email select').append('<option value="' + data['group_id'] + '">' + data['group_title'] + '</option>');
        return _this.load_saved_queries();
      });
    };

    EmailWidget.prototype.get_estimated = function(cb) {
      var curQueries, rows, send_data, tab;
      curQueries = [];
      tab = $('.emailWidget.queryTableBody');
      rows = tab.find('tr');
      _.each(rows, function(row) {
        return curQueries.push(row.getAttribute('query'));
      });
      send_data = {
        existing: curQueries.join(',')
      };
      return $.ajax({
        dataType: 'json',
        url: this.$totalEndpoint,
        data: send_data,
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb(gettext('Error getting estimated')) : void 0;
        })
      });
    };

    // estimate the students selected
    EmailWidget.prototype.reload_estimated = function() {
      var _this = this;
      $('.emailWidget.estimated').html(gettext('Calculating'));
      return this.get_estimated(function(error, students) {
        var full_selected_text, queryId, selected_text, studentsList;
        if (students['success'] === false) {
          $('.emailWidget.estimated').html(gettext('0 students selected'));
          return;
        }
        studentsList = students['data'];
        queryId = students['query_id'];
        // abort on error
        if (error) {
          return _this.show_errors(error);
        }
        selected_text = gettext('approx <%= numStudents %> students selected');
        full_selected_text = _.template(selected_text, {
          numStudents: studentsList.length
        });
        return $('.emailWidget.estimated').html(full_selected_text);
      });
    };

    // set error display
    EmailWidget.prototype.show_errors = function(msg) {
      var _ref;
      return (_ref = this.$error_section) != null ? _ref.text(msg) : void 0;
    };

    return EmailWidget;
  })();

  Queries = (function() {

    // enable subsections
    function Queries($section) {
      var _this = this;
      this.$section = $section;
      // attach self to html
      // so that instructor_dashboard.js can find this object
      // to call event handlers like 'onClickTitle'
      this.$section.data('wrapper', this);
      // initialize email widget selectors
      this.$emailListContainers = this.$section.find('.email-list-container');
      this.emailLists = _.map(this.$emailListContainers, function(email_list_container) {
        return new EmailSelectors($(email_list_container), _this.$section);
      });
      this.$email_widget_errors = this.$section.find('.email-lists-management .request-response-error');
      this.widget = new EmailWidget(this.emailLists, this.$section, this.$emailListContainers, this.$email_widget_errors);
    }

    Queries.prototype.onClickTitle = function() {
      var _ref;
      if ((_ref = this.$email_widget_errors) != null) {
        _ref.text('');
      }
      return this.widget.poller.start();
    };

    Queries.prototype.onExit = function() {
      var _ref;
      this.widget.poller.stop();
      return (_ref = this.$email_widget_errors) != null ? _ref.text('') : void 0;
    };

    return Queries;
  })();

  // export for use
  // create parent namespaces if they do not already exist.
  _.defaults(window, {
    InstructorDashboard: {}
  });
  _.defaults(window.InstructorDashboard, {
    sections: {}
  });
  _.defaults(window.InstructorDashboard.sections, {
    Queries: Queries
  });

}).call(this);
